// {/* <form onSubmit={handleSubmit}>
      
// <div class="form-outline my-3">
//     <input
//       type="text"
//       id="form2Example2"
//       class="form-control"
//       name={formValues.username}
//       onChange={handleChange}
//     />
//     <label class="form-label" for="form2Example2">
//       Username
//     </label>
//     <p>{formErrors.username}</p>
//   </div>


  // {/* <!-- Email input --> */}
//   <div class="form-outline ">
//     <input
//       type="email"
//       id="form2Example1"
//       class="form-control"
//       name="email"
//       value={formValues.email}
//       onChange={handleChange}
//     />

//     <label class="form-label" for="form2Example1">
//       Email address
//     </label>
//   </div>
//   <p>{formErrors.email}</p>
//   {/* <!-- Password input --> */}
//   <div class="form-outline mb-4">
//     <input
//       type="password"
//       id="form2Example2"
//       class="form-control"
//       name={formValues.password}
//       onChange={handleChange}
//     />
//     <label class="form-label" for="form2Example2">
//       Password
//     </label>
//     <p>{formErrors.password}</p>
//   </div>

//   {/* <!-- 2 column grid layout for inline styling --> */}
//   <div class="row mb-4">
//     <div class="col d-flex justify-content-center">
//       {/* <!-- Checkbox --> */}
//       <div class="form-check">
//         <input
//           class="form-check-input"
//           type="checkbox"
//           value=""
//           id="form2Example31"
//           checked
//         />
//         <label class="form-check-label" for="form2Example31">
//           {" "}
//           Remember me{" "}
//         </label>
//       </div>
//     </div>

//     <div class="col">
//       {/* <!-- Simple link --> */}
//       <a href="#!">Forgot password?</a>
//     </div>
//   </div>

//   {/* <!-- Submit button --> */}
//   <button type="button" class="btn btn-primary btn-block mb-4">
//     Sign in
//   </button>

//   {/* <!-- Register buttons --> */}
//   <div class="text-center">
//     <p>
//       Not a member? <a href="#!">Register</a>
//     </p>
//     <p>or sign up with:</p>
//     <button type="button" class="btn btn-link btn-floating mx-1">
//       <i class="fab fa-facebook-f"></i>
//     </button>

//     <button type="button" class="btn btn-link btn-floating mx-1">
//       <i class="fab fa-google"></i>
//     </button>

//     <button type="button" class="btn btn-link btn-floating mx-1">
//       <i class="fab fa-twitter"></i>
//     </button>

//     <button type="button" class="btn btn-link btn-floating mx-1">
//       <i class="fab fa-github"></i>
//     </button>
//   </div>
// </form> */}




import React, {useState } from "react";
import { useNavigate } from "react-router";
import axios  from "axios";


// declaring backend url here
const base_url = "http://localhost:9090";

export function AddPost() {
  // let's desructure the useNavigation 
  const navigate = useNavigate();
  // declaring state here
  const [user, setUser] = useState({});
 
  // let's declaring filed for validation using useState
  const [validationErrors, setValidationErrors] = useState({
    firstName: '',
    lastName: '',
    emailId: '',
  });
  

  // declaring formhandle like onSubmit="formhandle" for submit button here
   
   const formhandle = (event) => {
    event.preventDefault();
  
    if (user.firstName.length < 5) {
      setValidationErrors({ ...validationErrors, firstName: 'First name must be at least 5 characters' });
      return;
    }
  
    if (user.lastName.length < 5) {
      setValidationErrors({ ...validationErrors, lastName: 'Last name must be at least 5 characters' });
      return;
    }
  
    if (!user.emailId.includes('@')) {
      setValidationErrors({ ...validationErrors, emailId: 'Invalid email address' });
      return;
    }
  
    setValidationErrors({}); // Clear validation errors if everything is valid
  // let's pass the that user state varible in post function here
    // console.log(user);
    postDataOnServer(user);
  };
  

// declaring parameter here as data
  const postDataOnServer = (data) =>{
    axios.post(`${base_url}/api/employees`, data).then(
      (response)=>{

 // success 
        console.log(response.data);
        console.log("data upload successfully");
        navigate("/showall")
        getAllUserFromServer();
       
      },
      (error)=>{
 // error message 
 console.log(error)
 console.log("server is down")

      }
     )
  }

  const getAllUserFromServer = () => {
    axios.get(`${base_url}/api/employees`).then(
      (response) => {
        // success
        console.log(response.data);
        console.log("data loaded successfully");
        setUser(response.data);
      },
      (error) => {
        // error message
        console.log(error);
        console.log("server is down");
      }
    );
  };
  return (
    <>
      <div className="jumbotron">
        <form onSubmit={formhandle} className="needs-validation">
          <div className="mb-3 was-validated">
            <label className="form-label">First Name</label>
            <input
              type="text"
              id="firstName"
              className="form-control"
              required
              onChange={(e) => {
                setUser({ ...user, firstName: e.target.value });
                setValidationErrors({ ...validationErrors, firstName: e.target.value.length < 5 ? 'First name must be at least 5 characters' : '' });
              }}
            />
             <div className="invalid-feedback"><p >{validationErrors.firstName}</p></div>
          </div>
          <div className="mb-3  was-validated">
            <label className="form-label">Last Name</label>
            <input type="text" 
            className="form-control"
             required 
             onChange={(e) =>{setUser({...user, lastName:e.target.value})
             setValidationErrors({ ...validationErrors, lastName: e.target.value.length < 5 ? 'Last name must be at least 5 characters' : '' });
             }}/>
              <div className="invalid-feedback"><p>{validationErrors.lastName}</p></div>
          </div>
          <div className="mb-3  was-validated ">
            <label htmlFor="exampleInputEmail1" className="form-label">
              Email address
            </label>
            <input
              type="email"
              className="form-control"
              id="exampleInputEmail1"
              aria-describedby="emailHelp"
              required
              onChange={(e) =>{setUser({...user, emailId:e.target.value})
              setValidationErrors({ ...validationErrors, emailId: e.target.value.length < 3 ? 'Email name must be at least 3 characters' : '' });
            }}
              
            />
            <div className="invalid-feedback"><p>{validationErrors.emailId}</p></div>
            <div id="emailHelp" className="form-text">
              We'll never share your email with anyone else.
            </div>
            <button
              type="submit"
              className="btn btn-primary"
              disabled={
                validationErrors.firstName ||
                validationErrors.lastName ||
                validationErrors.emailId
              }
            >
              Submit
            </button>
          </div>
        </form>
      </div>
    
    </>
  );
}

export default AddPost;
